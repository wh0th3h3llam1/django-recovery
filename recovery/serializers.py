from django.contrib.auth import get_user_model, password_validation
from django.db import transaction
from django.utils import timezone
from django.utils.translation import gettext_lazy as _

from rest_framework import serializers

from .models import RecoveryCode

User = get_user_model()


class RecoveryCodeSerializer(serializers.ModelSerializer):

    class Meta:
        model = RecoveryCode
        fields = ("code", "used")
        read_only_fields = fields


class ResetPasswordSerializer(serializers.ModelSerializer):
    """Reset Password using one of the RecoveryCodes generated by the user"""

    _error_messages = {
        "password_mismatch": "The two password fields didnâ€™t match.",
        "invalid_recovery_code": "Invalid Recovery code",
        "not_found": "No such user found",
    }

    identifier = serializers.CharField(
        min_length=1,
        max_length=150,
        help_text=_("User username/email/phone number"),
        label="User Identifier",
    )
    recovery_code = serializers.CharField(max_length=16)
    password = serializers.CharField(max_length=150)
    confirm_password = serializers.CharField(max_length=150)

    def validate(self, attrs: dict) -> dict:
        identifier = attrs["identifier"]

        try:
            self.instance = User.objects.get_by_natural_key(identifier)
        except User.DoesNotExist:
            error_code = "not_found"
            raise serializers.ValidationError(
                detail=self._error_messages[error_code], code=error_code
            )

        code = attrs["recovery_code"]
        self._recovery_code: RecoveryCode | None = self.instance.recovery_codes.filter(
            code=code, used_at__isnull=True, revoked_at__isnull=True
        ).first()

        if not self._recovery_code:
            error_code = "invalid_recovery_code"
            raise serializers.ValidationError(
                detail=self._error_messages[error_code], code=error_code
            )

        pwd = attrs["password"]
        confirm_pwd = attrs["confirm_password"]

        if pwd != confirm_pwd:
            error_code = "password_mismatch"
            raise serializers.ValidationError(
                detail=self._error_messages[error_code], code=error_code
            )

        password_validation.validate_password(pwd, self.instance)
        return attrs

    class Meta:
        model = User
        fields = ("identifier", "recovery_code", "password", "confirm_password")

    def save(self, **kwargs):
        pwd = self.validated_data["password"]

        with transaction.atomic():
            self.instance._password = pwd
            self.instance.set_password(pwd)
            self.instance.save()

            self._recovery_code.used_at = timezone.now()
            self._recovery_code.save()
